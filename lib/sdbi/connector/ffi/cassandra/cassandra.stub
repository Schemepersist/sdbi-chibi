;; Apache Cassandra stub file

(c-system-include "cassandra.h")
(c-link "cassandra")

(define-c-int-type CassError)

(define-syntax define-consts
  (syntax-rules ()
    ((define-consts type name ...)
     (begin
       (define-c-const type name) ...))))

(define-consts int
  CASS_OK
  )


;; See https://docs.datastax.com/en/developer/cpp-driver/2.13/topics/
;; for an overview of the CassCluster and CassSession objects.

;;> A Cassandra cluster's configuration. Closes on gc.

(define-c-type CassCluster
  predicate: cass-cluster?
  finalizer: cass_cluster_free)

(define-c CassCluster (cass-cluster-new cass_cluster_new) ())


;;> A Cassandra session, provides connection pooling, "An application
;;> should create a single session object per keyspace as a session
;;> object is designed to be created once, reused, and shared by
;;> multiple threads within the application."  Closes on gc.

;;> On free, "if the session is still connected it will be
;;> synchronously closed before being deallocated.  Important: Do not
;;> free a session in a future callback. Freeing a session in a future
;;> callback will cause a deadlock."

(define-c-type CassSession
  predicate: cass-session?
  finalizer: cass_session_free)

(define-c CassSession (cass-session-new cass_session_new) ())


;;> "The future result of an operation.  It can represent a result if
;;> the operation completed successfully or an error if the operation
;;> failed. It can be waited on, polled or a callback can be
;;> attached."  Closes on gc.

;;> ~~~~ or should we manually close it??

(define-c-type CassFuture
  predicate: cass-future?
  finalizer: cass_future_free)

(define-c-type CassStatement
  predicate: cass-statement?
  finalizer: cass_statement_free)

(define-c-type CassResult
  predicate: cass-result?
  finalizer: cass_result_free)

(define-c-type CassRow
  predicate: cass-row?
  ;; finalizer: cass_row_free ~~~~ seems there's no one free function for it
  )

(define-c-type CassValue
  predicate: cass-value?
  ;; finalizer: cass_value_free ~~~~ seems there's no one free function for it
  )



(define-c CassError (cass-cluster-set-contact-points cass_cluster_set_contact_points)
  ((pointer CassCluster) string))

(define-c CassFuture (cass-session-connect cass_session_connect)
  ((pointer CassSession) (pointer CassCluster)))

(define-c CassError (cass-future-error-code cass_future_error_code)
  ((pointer CassFuture)))

(define-c CassStatement (cass-statement-new cass_statement_new)
  (string size_t))

(define-c CassFuture (cass-session-execute cass_session_execute)
  ((pointer CassSession) (pointer CassStatement)))

;; Turns out the C FFI doesn't handle the const modifier well, looks
;; like you have to use the pattern below copied from sqlite3.stub

(c-declare
"CassResult* cass_future_get_result_return ( CassFuture * future ) {
  return (CassResult *) cass_future_get_result ( future );
  }
")

(define-c CassResult (cass-future-get-result cass_future_get_result_return)
  ((pointer CassFuture)))

(c-declare
"CassValue* cass_row_get_column_by_name_return ( CassRow* row, char* name ) {
  return (CassValue *) cass_row_get_column_by_name ( (const CassRow *) row, (const char *) name );
  }
")

(define-c CassValue (cass-row-get-column-by-name cass_row_get_column_by_name_return)
  ((pointer CassRow) string))

;; ~~~~ Oh so dangerous if you don't get the casts right....

(c-declare
"CassError cass_value_get_string_return ( CassValue* the_value, char** the_string, size_t* the_length ) {
  return cass_value_get_string((const CassValue*) the_value, (const char **) the_string, the_length);
  }
")

(define-c CassError (cass-value-get-string cass_value_get_string_return)
  ((pointer CassValue) (result string) (result size_t)))
